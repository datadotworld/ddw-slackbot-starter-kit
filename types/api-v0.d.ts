/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v0/aice/{orgid}/{projectid}/answerTool": {
    /**
     * Answer Tool
     * @description Answer a question based on the provided chat context and the question itself. The chat context is optional. Call create_conversation to get a conversation ID before calling this endpoint.
     */
    post: operations["callAnswerTool"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    AnswerResponse: {
      answer: string;
      questionIri?: string;
      sparql?: string;
      terms?: components["schemas"]["Term"][];
    };
    QuestionPayload: {
      question?: string;
    };
    Term: {
      definition?: string;
      iri?: string;
      term?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /**
   * Answer Tool
   * @description Answer a question based on the provided chat context and the question itself. The chat context is optional. Call create_conversation to get a conversation ID before calling this endpoint.
   */
  callAnswerTool: {
    parameters: {
      query?: {
        /** @description Don't execute the call using the context engine. Instead, return a mock answer generated by the llm. */
        demo?: boolean;
      };
      path: {
        orgid: string;
        projectid: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["QuestionPayload"];
      };
    };
    responses: {
      /** @description default response */
      200: {
        content: {
          "application/json": components["schemas"]["AnswerResponse"];
        };
      };
    };
  };
}
